#include <stdlib.h>
#include <stdio.h>
#include <sys/time.h>
#include <math.h>
#include <string.h>
#include <algorithm>
#include <lemon/list_graph.h>
#include <lemon/full_graph.h>
#include <lemon/concepts/digraph.h>
#include <lemon/concepts/graph.h>
#include<lemon/graph_to_eps.h>
#include <lemon/core.h>
#include <cstdio>
using namespace std;
struct timeval tv; 
double get_clock() {
    struct timeval tv; int ok;
    ok = gettimeofday(&tv, NULL);
    if (ok<0) { printf("gettimeofday error");  }
    return (tv.tv_sec * 1.0 + tv.tv_usec * 1.0E-6); 
}

/*
 * Indexed min priority queue
 * Supports insertion in O(log N), deletion of any key (regardless of whether
 * the key is the minimum key or not) in O(log N) and changes to key values
 * in O(log N), where N is the number of
 * elements currently in the PQ
 */
class MinIndexedPQ {
    int NMAX, N, *heap, *index, *keys;

    void swap(int i, int j) {
        int t = heap[i]; heap[i] = heap[j]; heap[j] = t;
        index[heap[i]] = i; index[heap[j]] = j;
    }

    void bubbleUp(int k)    {
        while(k > 1 && keys[heap[k/2]] > keys[heap[k]])   {
            swap(k, k/2);
            k = k/2;
        }
    }

    void bubbleDown(int k)  {
        int j;
        while(2*k <= N) {
            j = 2*k;
            if(j < N && keys[heap[j]] > keys[heap[j+1]])
                j++;
            if(keys[heap[k]] <= keys[heap[j]])
                break;
            swap(k, j);
            k = j;
        }
    }

public:
    // Create an empty MinIndexedPQ which can contain atmost NMAX elements
    MinIndexedPQ(int NMAX)  {
        this->NMAX = NMAX;
        N = 0;
        keys = new int[NMAX + 1];
        heap = new int[NMAX + 1];
        index = new int[NMAX + 1];
        for(int i = 0; i <= NMAX; i++)
            index[i] = -1;
    }
	
    ~MinIndexedPQ() {
        delete [] keys;
        delete [] heap;
        delete [] index;
    }

    // check if the PQ is empty
    bool isEmpty()  {
        return N == 0;
    }

    // check if i is an index on the PQ
    bool contains(int i)    {
        return index[i] != -1;
    }

    // return the number of elements in the PQ
    int size()  {
        return N;
    }

    // associate key with index i; 0 < i < NMAX
    void insert(int i, int key) {
        N++;
        index[i] = N;
        heap[N] = i;
        keys[i] = key;
        bubbleUp(N);
    }

    // returns the index associated with the minimal key
    int minIndex()  {
        return heap[1];
    }

    // returns the minimal key
    int minKey()    {
        return keys[heap[1]];
    }

    // delete the minimal key and return its associated index
    // Warning: Don't try to read from this index after calling this function
    int deleteMin() {
        int min = heap[1];
        swap(1, N--);
        bubbleDown(1);
        index[min] = -1;
        heap[N+1] = -1;
        return min;
    }

    // returns the key associated with index i
    int keyOf(int i)    {
        return keys[i];
    }

    // change the key associated with index i to the specified value
    void changeKey(int i, int key)  {
        keys[i] = key;
        bubbleUp(index[i]);
        bubbleDown(index[i]);
    }

    // decrease the key associated with index i to the specified value
    void decreaseKey(int i, int key)    {
        keys[i] = key;
        bubbleUp(index[i]);
    }

    // increase the key associated with index i to the specified value
    void increaseKey(int i, int key)    {
        keys[i] = key;
        bubbleDown(index[i]);
    }

    // delete the key associated with index i
    void deleteKey(int i)   {
        int ind = index[i];
        swap(ind, N--);
        bubbleUp(ind);
        bubbleDown(ind);
        index[i] = -1;
    }
};





class Union_Find
{
  public:
 
	int * id;
	int * sz;
	Union_Find(int n)	//class constructor
	{
		id = new int[n];
		sz = new int[n];
		for (int i = 0; i < n; ++i)
		{
			id[i] = i;
			sz[i] = 1;
		}
	}
	
	int root(int i)
	{
		while(i != id[i])
		{
			id[i] = id[id[i]];	//path Compression
			i = id[i];
		}
		return i;
	}
	int find(int p, int q)
	{
		return root(p)==root(q);
	}
	void unite(int p, int q)
	{
		int i = root(p);
		int j = root(q);
 
		if(sz[i] < sz[j])
		{
			id[i] = j;
			sz[j] += sz[i];
		}
		else
		{
			id[j] = i;
			sz[i] += sz[j];
		}
	}
	~Union_Find(){
		free(id);
		free(sz);
	}
};



// Check if a graph has a cycle using BFS
// Take too much time
// Ditched (X___X)
int graphHasCycle(ListDigraph *g, int size)
{
    ListDigraph::Node u;
    int i;
    int inDegree[size];
    queue<int> sourceQ;
    for(i = 0; i < size; i++)
    {
        u = g->nodeFromId(i);
        int numIn = 0;
        for (ListDigraph::InArcIt a(*g, u); a != INVALID; ++a)
            numIn++;
        inDegree[i] = numIn;
        if (numIn == 0)
            sourceQ.push(i);
    }
    
    
    while(!sourceQ.empty()){
        int source = sourceQ.front();
        sourceQ.pop();
        
        int processed[size];
        queue<int> myQ;
    
    for(i = 0; i < size; i++)
        processed[i]=0;

    
    myQ.push(source);
    int curr;
    
    while(!myQ.empty())
    {
        i = myQ.front();
        myQ.pop();
        u = g->nodeFromId(i);
        processed[i] = 1;
        for (ListDigraph::OutArcIt a(*g, u); a != INVALID; ++a)
        {
            ListDigraph::Arc arc(a);
            ListDigraph::Node v(g->target(arc));
            int j = g->id(v);
            if(processed[j] == 0)
            {
                myQ.push(j);
                //cout << i << " -> " << j << endl;
            }
            else
            {
                //cout << "random graph has a cycle!" << endl;
                return 1;
            }
        }
    }
    }
    
    return 0;

}

